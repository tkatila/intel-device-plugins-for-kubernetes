name: CI
on:
  push:
    branches:
      - main
      - 'release-*'
      - 'trivy-scan-test'
  pull_request:
    branches:
      - main
      - 'release-*'
      - 'trivy-scan-test'
env:
  K8S_VERSION: 1.27.1
permissions:
  contents: read

jobs:

  docs:
    name: Check docs are buildable
    runs-on: ubuntu-22.04
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-venv
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up doc directory
      run: |
        mkdir $HOME/output
        touch $HOME/output/.nojekyll
    - name: Build latest
      run: |
        GITHUB_SHA=$(git rev-parse HEAD)
        export GITHUB_SHA
        rm -rf _work/venv
        make vhtml
        mv _build/html/* $HOME/output/

  golangci:
    permissions:
      contents: read  # for actions/checkout to fetch code
      pull-requests: read  # for golangci/golangci-lint-action to fetch pull requests
    name: lint
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          check-latest: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52.1
          args: -v --timeout 5m

  build:
    name: Build and check device plugins
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          check-latest: true
      - name: Check Dockerfiles
        run: make check-dockerfiles
      - run: make go-mod-tidy
      - run: make BUILDTAGS=kerneldrv
      - run: make test BUILDTAGS=kerneldrv
      - name: Install envtest tool and run envtest
        run: |
          go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
          setup-envtest use ${K8S_VERSION}
      - run: |
          KUBEBUILDER_ASSETS=$(setup-envtest use -i -p path ${K8S_VERSION}) make envtest
      - run: make check-github-actions
      - name: Codecov report
        run: bash <(curl -s https://codecov.io/bash)

  image:
    name: Build image
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        image:
          - intel-fpga-admissionwebhook
          - intel-fpga-initcontainer
          - intel-gpu-fakedev
          - intel-gpu-initcontainer
          - intel-gpu-plugin
          - intel-fpga-plugin
          - intel-qat-initcontainer
          - intel-qat-plugin
          - intel-qat-plugin-kerneldrv
          - intel-deviceplugin-operator
          - intel-sgx-admissionwebhook
          - intel-sgx-plugin
          - intel-sgx-initcontainer
          - intel-dsa-plugin
          - intel-iaa-plugin
          - intel-idxd-config-initcontainer
          - intel-dlb-plugin
          - intel-dlb-initcontainer
          - intel-xpumanager-sidecar

          # Demo images
          - crypto-perf
          - accel-config-demo
          - intel-opencl-icd
          - opae-nlb-demo
          - openssl-qat-engine
          - sgx-sdk-demo
          - sgx-aesmd-demo
          - dlb-dpdk-demo
          - dlb-libdlb-demo
        builder: [buildah, docker]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
      - run: make -e vendor
      - name: Build image
        env:
          IMAGE_NAME: ${{ matrix.image }}
          BUILDER_NAME: ${{ matrix.builder }}
        run: |
          make ${IMAGE_NAME} BUILDER=${BUILDER_NAME}

  terrascan:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install terrascan
      run: |
        curl -sL "$(curl -sL https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
        tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
        install terrascan /usr/local/bin && rm terrascan
    - name: Run Terrascan
      run: make terrascan

  trivy-scan-code:
    name: Trivy scan
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Run Trivy in fs mode
      continue-on-error: true
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: fs
        scan-ref: .
        exit-code: 1
        list-all-pkgs: true
        format: json
        output: trivy-report.json

    - name: Show report in human-readable format
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: convert
        vuln-type: ''
        severity: ''
        image-ref: trivy-report.json
        format: table

    - name: Convert report to sarif
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: convert
        vuln-type: ''
        severity: ''
        image-ref: trivy-report.json
        format: sarif
        output: trivy-report.sarif

    - name: Convert report to csv
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: convert
        vuln-type: ''
        severity: ''
        image-ref: trivy-report.json
        format: template
        template: "@.github/workflows/trivy-csv.tpl"
        output: trivy-report.csv

    - name: Upload sarif report to GitHub Security tab
      if: ${{ github.event_name != 'pull_request' }}
      uses: github/codeql-action/upload-sarif@v2
      with:
       sarif_file: trivy-report.sarif

    - name: Upload CSV report as an artifact
      uses: actions/upload-artifact@v3
      with:
        name: trivy-report
        path: trivy-report.csv
